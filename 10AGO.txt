# R libraries:
# install.packages("argparse")
# install.packages("gProfileR")
# install.packages("lme4")
# source("http://bioconductor.org/biocLite.R")
# biocLite(c("affy", "limma", "frma", "sva", "annotate"))

# https://github.com/CSB-IG/rnw/tree/master/normalization-preprocessing

# 133plus2 #####Normalizaci√≥n con frma de cada set por separado ####

# biocLite("hgu133plus2frmavecs")

# GSE48350: /mnt/e/diana/kenya/GSE48350_RAW
# GSE4757: /mnt/e/diana/kenya/GSE4757
# ~/rnw/normalization-preprocessing

Rscript ~/rnw/normalization-preprocessing/frma_normalizer.R \
        --celfolder /mnt/e/diana/kenya/GSE48350_RAW/ /mnt/e/diana/kenya/GSE4757/ \
        --bgcorrect rma \
        --normalize quantile \
        --summarize robust_weighted_average \
        --matrix /mnt/e/diana/kenya/133plus2.tsv

# 133A

# biocLite("hgu133afrmavecs")

# GSE1297: /mnt/e/diana/kenya/GSE1297
# ~/rnw/normalization-preprocessing

Rscript ~/rnw/normalization-preprocessing/frma_normalizer.R \
        --celfolder /mnt/e/diana/kenya/GSE1297/ \
        --bgcorrect rma \
        --normalize quantile \
        --summarize robust_weighted_average \
        --matrix /mnt/e/diana/kenya/133A.tsv
        
# agregar un tab a cada columna de cada archivo .tsv

# Script R #### Para arreglar las dimensiones si se utilizan dos arreglos diferentes###

U133A <- read.table("/mnt/e/diana/kenya/133A.tsv")
U133plus2 <- read.table("/mnt/e/diana/kenya/133plus2.tsv")

dim(U133A)
dim(U133plus2)

U133A_crop <- U133A[intersect(rownames(U133A), rownames(U133plus2)),]
U133plus2_crop <- U133plus2[intersect(rownames(U133A), rownames(U133plus2)),]

dim(U133A_crop)
dim(U133plus2_crop)

library(limma)
identical(rownames(U133A_crop), rownames(U133plus2_crop))
U133_norm <- data.matrix(cbind(U133A_crop, U133plus2_crop))
U133_final <- normalizeBetweenArrays(U133_norm)

dim(U133_norm)

write.table(U133_norm, "U133_norm_complete_set.txt", quote = F, row.names = TRUE, col.names = NA, sep = "\t")

# combat

Rscript ~/rnw/normalization-preprocessing/ComBat_correction.R \
        --matrix /mnt/e/diana/kenya/U133_norm_complete_set.txt \
        --phenotype /mnt/e/diana/kenya/metadata.tsv \
        --output /mnt/e/diana/kenya/U133_norm_complete_batch_corrected_mtx.txt

# collapse
library(argparse)
library(gProfileR)
library(limma)

edata <- as.matrix(read.table(file="U133_norm_complete_batch_corrected_mtx.txt", header=TRUE, sep="\t", row.names=1))
pheno <- read.table(file="metadata.tsv", header = TRUE, sep = "\t", row.names=1)

gconvert <- gconvert(query=rownames(edata), target="HGNC", mthreshold=1, filter_na=FALSE)
class(gconvert[,1])<-"integer"
gconvert<- gconvert[sort.list(gconvert[,1]),]
genesymbol <- gconvert[,5]
genesymbol<-ifelse(genesymbol=="N/A", as.vector(rownames(edata)), as.vector(genesymbol))

design = matrix(rep(0, 2*length(rownames(pheno))), nrow=length(rownames(pheno)))
colnames(design) <- c('case','control')
rownames(design) <- rownames(pheno)
design[which(pheno$outcome == "case"),1]=1
design[which(pheno$outcome == "control"),2]=1

###  Medians collapse  ###
colMedians=function(mat,na.rm=TRUE) {return(apply(mat,2,median,na.rm=na.rm))}
precolaps <- data.frame(genesymbol, edata)
colapsed <- do.call(rbind, lapply(split(precolaps,precolaps[,1]), function(chunk) {colMedians(chunk[,-1])}))

write.table(colapsed, file="U133_collapsed_exp_mtx.txt", quote = FALSE, sep = "\t", row.names = TRUE, col.names=NA)

affy <- rownames(colapsed)[grepl("*_at", rownames(colapsed))]
genes <- setdiff(rownames(colapsed), affy)
solo_geneID <- colapsed[genes, ]

write.table(solo_geneID, file="U133_collapsed_soloGENEID_exp_mtx.txt", quote = FALSE, sep = "\t", row.names = TRUE, col.names=NA)

probes <- rownames(colapsed)
write.table(probes, file="U133_probes.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names=FALSE)
write.table(genes, file="U133_probes_sologeneID.txt", quote = FALSE, sep = "\t", row.names = FALSE, col.names=FALSE)

save.image("norm_10ago.RData")
