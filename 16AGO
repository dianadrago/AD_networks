###Matrices sin celulas y expresión diferencial
matriz <- read.table("complete_all_combat_mtx.txt") 
meta <- read.table("metadata_complete.tsv", header= TRUE) 
dim(matriz)
dim(meta)
celulas<- list.files(path = "/mnt/e/diana/kenya/GSE4757/")
muestras <- setdiff(as.vector(meta$sample_name), celulas)
dim(matriz)
filtro<- (matriz[,muestras])
dim(filtro)
meta_filtro<- (meta[meta$sample_name %in% muestras,])
dim(meta)
dim(meta_filtro)
head(meta_filtro)
filtro[1:5, 1:5]
write.table(filtro, "filtro.txt", quote = F, row.names = TRUE, col.names = NA, sep = "\t")
write.table(meta_filtro, "meta_filtro.txt", quote = F, row.names = FALSE, col.names = TRUE, sep = "\t")

####Expresion diferencial
library(limma)
edata <- read.table("filtro.txt")
pheno <- read.table("meta_filtro.txt", header=TRUE, row.names=1)
edata <- edata[ ,(as.vector(pheno$sample_name))]

# Design a contingence matrix
design = matrix(rep(0, 2*length(rownames(pheno))), nrow=length(rownames(pheno)))
colnames(design) <- c('case','control')
rownames(design) <- rownames(pheno)
design[which(pheno$outcome == "case"),1]=1
design[which(pheno$outcome == "control"),2]=1

# make the contrasts matrix
cont.matrix = makeContrasts('case - control', levels=design)
# differential expression analisys
fit = lmFit(edata, design)
fit2 = contrasts.fit(fit, cont.matrix)
fit2 = eBayes(fit2)
statistics <- topTable(fit2, coef=1, adjust='fdr', n = length(row.names(edata)), sort = "none")

write.table(statistics, "matriz_final_para_expresion_sc.txt", quote = F, row.names = TRUE, col.names = NA, sep = "\t")

#####Para la expresión diferencial de sólo las 20 neuronas del proyecto GSE4757
### Matriz final y metadata para filtrar###
matriz <- read.table("complete_all_combat_mtx.txt") 
meta <- read.table("metadata_complete.tsv", header= TRUE) 
dim(matriz)
dim(meta)

####Dejar sólo celulas####
celulas<- list.files(path = "/mnt/e/diana/kenya/GSE4757/")
dim(matriz)
filtro_solo_celulas<- (matriz[,celulas])
dim(filtro_solo_celulas)
meta_filtro_solo_celulas<- (meta[meta$sample_name %in% celulas,])
dim(meta)
dim(meta_filtro_solo_celulas)
head(meta_filtro_solo_celulas)
filtro_solo_celulas[1:5, 1:5]
####Guardar las tablas que serviran de entrada para la expresión#####
write.table(filtro_solo_celulas, "filtro_solo_celulas.txt", quote = F, row.names = TRUE, col.names = NA, sep = "\t")
write.table(meta_filtro_solo_celulas, "meta_filtro_solo_celulas.txt", quote = F, row.names = FALSE, col.names = TRUE, sep = "\t")

####Expresion diferencial (sólo celulas)###
library(limma)
edata <- read.table("filtro_solo_celulas.txt")
pheno <- read.table("meta_filtro_solo_celulas.txt", header=TRUE)

# Design a contingence matrix
design = matrix(rep(0, 2*length(rownames(pheno))), nrow=length(rownames(pheno)))
colnames(design) <- c('case','control')
rownames(design) <- rownames(pheno)
design[which(pheno$outcome == "case"),1]=1
design[which(pheno$outcome == "control"),2]=1

# make the contrasts matrix
cont.matrix = makeContrasts('case - control', levels=design)
# differential expression analisys
fit = lmFit(edata, design)
fit2 = contrasts.fit(fit, cont.matrix)
fit2 = eBayes(fit2)
statistics <- topTable(fit2, coef=1, adjust='fdr', n = length(row.names(edata)), sort = "none")

write.table(statistics, "matriz_solo_celulas_expresion_diferencial.txt", quote = F, row.names = TRUE, col.names = NA, sep = "\t")
